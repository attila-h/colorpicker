[{"/home/attila/Codecool/Homework/colorpicker/src/index.js":"1","/home/attila/Codecool/Homework/colorpicker/src/App.js":"2","/home/attila/Codecool/Homework/colorpicker/src/components/Palettes.js":"3","/home/attila/Codecool/Homework/colorpicker/src/components/Palette.js":"4","/home/attila/Codecool/Homework/colorpicker/src/components/Card.js":"5","/home/attila/Codecool/Homework/colorpicker/src/components/Color.js":"6"},{"size":219,"mtime":1610624889250,"results":"7","hashOfConfig":"8"},{"size":229,"mtime":1610650257637,"results":"9","hashOfConfig":"8"},{"size":1666,"mtime":1610644776696,"results":"10","hashOfConfig":"8"},{"size":567,"mtime":1610650457227,"results":"11","hashOfConfig":"8"},{"size":155,"mtime":1610635589979,"results":"12","hashOfConfig":"8"},{"size":253,"mtime":1610645105439,"results":"13","hashOfConfig":"8"},{"filePath":"14","messages":"15","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},"1srb4kh",{"filePath":"17","messages":"18","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"19","messages":"20","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"21","usedDeprecatedRules":"16"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"24","messages":"25","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},"/home/attila/Codecool/Homework/colorpicker/src/index.js",[],["28","29"],"/home/attila/Codecool/Homework/colorpicker/src/App.js",[],"/home/attila/Codecool/Homework/colorpicker/src/components/Palettes.js",["30"],"import axios from \"axios\";\nimport React, { useEffect, useRef, useState } from \"react\";\nimport Palette from \"./Palette\";\nimport \"./Palettes.css\";\n\nconst Palettes = () => {\n  const PALETTES_PER_PAGE = 10;\n  const [palettes, setPalettes] = useState([]);\n  const [isLoading, setIsLoading] = useState(true);\n  const [offset, setOffset] = useState(0);\n  const scrollTrigger = useRef();\n  const intersectionObserver = new IntersectionObserver((entries) => {\n    if (entries[0].intersectionRatio <= 0) return;\n    if (isLoading) return;\n    setOffset((actualOffset) => actualOffset + PALETTES_PER_PAGE);\n  });\n\n  useEffect(() => {\n    const observedDiv = scrollTrigger.current;\n    intersectionObserver.observe(observedDiv);\n    return () => intersectionObserver.disconnect(observedDiv);\n  }, [isLoading]);\n\n  useEffect(() => {\n    setIsLoading(true);\n    axios\n      .get(\n        `https://my-cors-proxy.herokuapp.com/http://www.colourlovers.com/api/palettes/new?format=json&numResults=${PALETTES_PER_PAGE}&resultOffset=${offset}`\n      )\n      .then((result) => {\n        setPalettes((prevPalettes) => [...prevPalettes, ...result.data]);\n        console.log(result.data);\n        setIsLoading(false);\n      })\n      .catch((error) => {\n        console.log(\"Error while retrieving new palettes\");\n        setIsLoading(false);\n      });\n  }, [offset]);\n\n  return (\n    <React.Fragment>\n      <div className=\"palettes-container\">\n        {palettes.map((palette) => {\n          return <Palette key={palette.id} value={palette} />;\n        })}\n      </div>\n      <div className=\"scrollTrigger\" ref={scrollTrigger}></div>\n    </React.Fragment>\n  );\n};\n\nexport default Palettes;\n","/home/attila/Codecool/Homework/colorpicker/src/components/Palette.js",[],"/home/attila/Codecool/Homework/colorpicker/src/components/Card.js",[],"/home/attila/Codecool/Homework/colorpicker/src/components/Color.js",[],{"ruleId":"31","replacedBy":"32"},{"ruleId":"33","replacedBy":"34"},{"ruleId":"35","severity":1,"message":"36","line":22,"column":6,"nodeType":"37","endLine":22,"endColumn":17,"suggestions":"38"},"no-native-reassign",["39"],"no-negated-in-lhs",["40"],"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'intersectionObserver'. Either include it or remove the dependency array.","ArrayExpression",["41"],"no-global-assign","no-unsafe-negation",{"desc":"42","fix":"43"},"Update the dependencies array to be: [intersectionObserver, isLoading]",{"range":"44","text":"45"},[785,796],"[intersectionObserver, isLoading]"]